{"ast":null,"code":"var _jsxFileName = \"C:\\\\python-training\\\\eyeglad\\\\campaign-analytics\\\\src\\\\components\\\\CampaignDashboard\\\\index.jsx\",\n  _s = $RefreshSig$();\n// CampaignComparison/index.jsx\nimport React, { useState, useEffect, useMemo } from 'react'; // 添加 useMemo\nimport _ from 'lodash'; // 添加 lodash\nimport { fetchCampaignData } from '../../utils/api';\nimport { processCampaignData, processTrendData } from '../../utils/dataTransforms';\n\n// 導入子組件\nimport BestPerformersCard from './components/BestPerformersCard';\nimport CampaignTable from './components/CampaignTable';\nimport TrendCharts from './components/TrendCharts';\nimport ControlPanel from './components/ControlPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CampaignComparison = () => {\n  _s();\n  // 狀態管理\n  const [campaignData, setCampaignData] = useState([]);\n  const [sortConfig, setSortConfig] = useState({\n    key: 'ROAS',\n    direction: 'desc'\n  });\n  const [bestPerformers, setBestPerformers] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  //const [timeGranularity, setTimeGranularity] = useState('day');\n  const [timeGranularity, setTimeGranularity] = useState('hour'); // 預設為小時\n  const [processedData, setProcessedData] = useState([]);\n  const [compareMode, setCompareMode] = useState('combined');\n  const [rawData, setRawData] = useState([]);\n  const [availableCampaigns, setAvailableCampaigns] = useState([]);\n  const [selectedCampaigns, setSelectedCampaigns] = useState([]);\n  const [dateRange, setDateRange] = useState({\n    startDate: '',\n    endDate: ''\n  });\n\n  // 初始數據載入\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchCampaignData();\n        setRawData(data);\n\n        // 設置初始日期範圍\n        if (data.length > 0) {\n          const dates = data.map(item => new Date(item[\"Start Date\"]));\n          const minDate = new Date(Math.min(...dates));\n          const maxDate = new Date(Math.max(...dates));\n          setDateRange({\n            startDate: minDate.toISOString().split('T')[0],\n            endDate: maxDate.toISOString().split('T')[0]\n          });\n        }\n\n        // 處理基本統計和最佳表現\n        const {\n          stats,\n          best\n        } = processCampaignData(data);\n        setCampaignData(stats);\n        setBestPerformers(best);\n\n        // 處理趨勢數據\n        const trends = processTrendData(data, timeGranularity, compareMode);\n        setProcessedData(trends);\n      } catch (error) {\n        console.error('載入錯誤:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // 在數據載入後設置可用的廣告活動\n  useEffect(() => {\n    if (campaignData.length > 0) {\n      const campaigns = campaignData.map(item => item.name);\n      setAvailableCampaigns(campaigns);\n      setSelectedCampaigns(campaigns); // 預設全選\n    }\n  }, [campaignData]);\n\n  // 當時間粒度、比較模式或日期範圍改變時更新趨勢數據\n  useEffect(() => {\n    if (rawData.length > 0 && dateRange.startDate && dateRange.endDate) {\n      // 首先根據日期範圍過濾原始數據\n      const filteredRawData = rawData.filter(item => {\n        const date = new Date(item[\"Start Date\"]);\n        const start = new Date(dateRange.startDate);\n        const end = new Date(dateRange.endDate);\n        return date >= start && date <= end;\n      });\n\n      // 然後處理趨勢數據\n      const trends = processTrendData(filteredRawData, timeGranularity, compareMode);\n      setProcessedData(trends);\n    }\n  }, [timeGranularity, compareMode, dateRange, rawData]);\n\n  // 修改過濾數據的邏輯\n  const filteredData = useMemo(() => {\n    if (selectedCampaigns.length === 0 || !processedData) return [];\n    return processedData.map(data => {\n      if (compareMode === 'separate') {\n        return {\n          ...data,\n          campaignData: _.pick(data.campaignData || {}, selectedCampaigns)\n        };\n      }\n      return data;\n    });\n  }, [processedData, selectedCampaigns, compareMode]);\n  // 當時間粒度或比較模式改變時更新趨勢數據\n  useEffect(() => {\n    if (rawData.length > 0) {\n      const trends = processTrendData(rawData, timeGranularity, compareMode);\n      setProcessedData(trends);\n    }\n  }, [timeGranularity, compareMode, rawData]);\n\n  // 處理排序\n  const handleSort = key => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev.key === key && prev.direction === 'desc' ? 'asc' : 'desc'\n    }));\n  };\n\n  // 載入中狀態\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center min-h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 錯誤狀態\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-red-50 border border-red-200 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-red-800 font-semibold\",\n        children: \"\\u8F09\\u5165\\u5931\\u6557\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 主要內容渲染\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6 p-4\",\n    children: [bestPerformers && /*#__PURE__*/_jsxDEV(BestPerformersCard, {\n      bestPerformers: bestPerformers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      timeGranularity: timeGranularity,\n      setTimeGranularity: setTimeGranularity,\n      compareMode: compareMode,\n      setCompareMode: setCompareMode,\n      campaigns: availableCampaigns,\n      selectedCampaigns: selectedCampaigns,\n      setSelectedCampaigns: setSelectedCampaigns,\n      dateRange: dateRange,\n      setDateRange: setDateRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TrendCharts, {\n      processedData: filteredData,\n      compareMode: compareMode,\n      timeGranularity: timeGranularity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CampaignTable, {\n      campaignData: campaignData,\n      handleSort: handleSort,\n      sortConfig: sortConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(CampaignComparison, \"Vd9qlsBnsOxbtF9fHyPvQ4xa1gU=\");\n_c = CampaignComparison;\nexport default CampaignComparison;\nvar _c;\n$RefreshReg$(_c, \"CampaignComparison\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","_","fetchCampaignData","processCampaignData","processTrendData","BestPerformersCard","CampaignTable","TrendCharts","ControlPanel","jsxDEV","_jsxDEV","CampaignComparison","_s","campaignData","setCampaignData","sortConfig","setSortConfig","key","direction","bestPerformers","setBestPerformers","loading","setLoading","error","setError","timeGranularity","setTimeGranularity","processedData","setProcessedData","compareMode","setCompareMode","rawData","setRawData","availableCampaigns","setAvailableCampaigns","selectedCampaigns","setSelectedCampaigns","dateRange","setDateRange","startDate","endDate","loadInitialData","data","length","dates","map","item","Date","minDate","Math","min","maxDate","max","toISOString","split","stats","best","trends","console","message","campaigns","name","filteredRawData","filter","date","start","end","filteredData","pick","handleSort","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/components/CampaignDashboard/index.jsx"],"sourcesContent":["// CampaignComparison/index.jsx\r\nimport React, { useState, useEffect, useMemo } from 'react';  // 添加 useMemo\r\nimport _ from 'lodash';  // 添加 lodash\r\nimport { fetchCampaignData } from '../../utils/api';\r\nimport { processCampaignData, processTrendData } from '../../utils/dataTransforms';\r\n\r\n// 導入子組件\r\nimport BestPerformersCard from './components/BestPerformersCard';\r\nimport CampaignTable from './components/CampaignTable';\r\nimport TrendCharts from './components/TrendCharts';\r\nimport ControlPanel from './components/ControlPanel';\r\n\r\nconst CampaignComparison = () => {\r\n  // 狀態管理\r\n  const [campaignData, setCampaignData] = useState([]);\r\n  const [sortConfig, setSortConfig] = useState({ key: 'ROAS', direction: 'desc' });\r\n  const [bestPerformers, setBestPerformers] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  //const [timeGranularity, setTimeGranularity] = useState('day');\r\n  const [timeGranularity, setTimeGranularity] = useState('hour'); // 預設為小時\r\n  const [processedData, setProcessedData] = useState([]);\r\n  const [compareMode, setCompareMode] = useState('combined');\r\n  const [rawData, setRawData] = useState([]);\r\n  const [availableCampaigns, setAvailableCampaigns] = useState([]);\r\n  const [selectedCampaigns, setSelectedCampaigns] = useState([]);\r\n  const [dateRange, setDateRange] = useState({\r\n    startDate: '',\r\n    endDate: ''\r\n  });\r\n\r\n  // 初始數據載入\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await fetchCampaignData();\r\n        setRawData(data);\r\n\r\n        // 設置初始日期範圍\r\n        if (data.length > 0) {\r\n          const dates = data.map(item => new Date(item[\"Start Date\"]));\r\n          const minDate = new Date(Math.min(...dates));\r\n          const maxDate = new Date(Math.max(...dates));\r\n          \r\n          setDateRange({\r\n            startDate: minDate.toISOString().split('T')[0],\r\n            endDate: maxDate.toISOString().split('T')[0]\r\n          });\r\n        }\r\n        \r\n        // 處理基本統計和最佳表現\r\n        const { stats, best } = processCampaignData(data);\r\n        setCampaignData(stats);\r\n        setBestPerformers(best);\r\n        \r\n        // 處理趨勢數據\r\n        const trends = processTrendData(data, timeGranularity, compareMode);\r\n        setProcessedData(trends);\r\n      } catch (error) {\r\n        console.error('載入錯誤:', error);\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // 在數據載入後設置可用的廣告活動\r\n  useEffect(() => {\r\n    if (campaignData.length > 0) {\r\n      const campaigns = campaignData.map(item => item.name);\r\n      setAvailableCampaigns(campaigns);\r\n      setSelectedCampaigns(campaigns); // 預設全選\r\n    }\r\n  }, [campaignData]);\r\n\r\n// 當時間粒度、比較模式或日期範圍改變時更新趨勢數據\r\nuseEffect(() => {\r\n  if (rawData.length > 0 && dateRange.startDate && dateRange.endDate) {\r\n    // 首先根據日期範圍過濾原始數據\r\n    const filteredRawData = rawData.filter(item => {\r\n      const date = new Date(item[\"Start Date\"]);\r\n      const start = new Date(dateRange.startDate);\r\n      const end = new Date(dateRange.endDate);\r\n      return date >= start && date <= end;\r\n    });\r\n\r\n    // 然後處理趨勢數據\r\n    const trends = processTrendData(filteredRawData, timeGranularity, compareMode);\r\n    setProcessedData(trends);\r\n  }\r\n}, [timeGranularity, compareMode, dateRange, rawData]);\r\n\r\n  // 修改過濾數據的邏輯\r\n  const filteredData = useMemo(() => {\r\n    if (selectedCampaigns.length === 0 || !processedData) return [];\r\n    \r\n    return processedData.map(data => {\r\n      if (compareMode === 'separate') {\r\n        return {\r\n          ...data,\r\n          campaignData: _.pick(data.campaignData || {}, selectedCampaigns)\r\n        };\r\n      }\r\n      return data;\r\n    });\r\n  }, [processedData, selectedCampaigns, compareMode]);\r\n  // 當時間粒度或比較模式改變時更新趨勢數據\r\n  useEffect(() => {\r\n    if (rawData.length > 0) {\r\n      const trends = processTrendData(rawData, timeGranularity, compareMode);\r\n      setProcessedData(trends);\r\n    }\r\n  }, [timeGranularity, compareMode, rawData]);\r\n\r\n  // 處理排序\r\n  const handleSort = (key) => {\r\n    setSortConfig(prev => ({\r\n      key,\r\n      direction: prev.key === key && prev.direction === 'desc' ? 'asc' : 'desc'\r\n    }));\r\n  };\r\n\r\n  // 載入中狀態\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 錯誤狀態\r\n  if (error) {\r\n    return (\r\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h3 className=\"text-red-800 font-semibold\">載入失敗</h3>\r\n        <p className=\"text-red-600\">{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 主要內容渲染\r\n  return (\r\n    <div className=\"space-y-6 p-4\">\r\n      {bestPerformers && (\r\n        <BestPerformersCard bestPerformers={bestPerformers} />\r\n      )}\r\n\r\n      <ControlPanel\r\n        timeGranularity={timeGranularity}\r\n        setTimeGranularity={setTimeGranularity}\r\n        compareMode={compareMode}\r\n        setCompareMode={setCompareMode}\r\n        campaigns={availableCampaigns}\r\n        selectedCampaigns={selectedCampaigns}\r\n        setSelectedCampaigns={setSelectedCampaigns}\r\n        dateRange={dateRange}\r\n        setDateRange={setDateRange}\r\n      />\r\n      \r\n      <TrendCharts \r\n        processedData={filteredData}\r\n        compareMode={compareMode}\r\n        timeGranularity={timeGranularity}\r\n      />\r\n      \r\n      <CampaignTable \r\n        campaignData={campaignData}\r\n        handleSort={handleSort}\r\n        sortConfig={sortConfig}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampaignComparison;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}