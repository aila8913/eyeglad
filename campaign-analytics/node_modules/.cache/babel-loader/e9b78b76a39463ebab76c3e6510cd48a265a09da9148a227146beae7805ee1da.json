{"ast":null,"code":"var _jsxFileName = \"C:\\\\python-training\\\\eyeglad\\\\campaign-analytics\\\\src\\\\components\\\\CampaignDashboard\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport _ from 'lodash';\n// 引入數據處理邏輯\nimport { processCampaignData } from '../../utils/dataTransforms';\n\n// 導入子組件\nimport BestPerformersCard from './components/BestPerformersCard';\nimport CampaignTable from './components/CampaignTable';\nimport TrendCharts from './components/TrendCharts';\nimport ControlPanel from './components/ControlPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CampaignComparison = () => {\n  _s();\n  const [campaignData, setCampaignData] = useState([]);\n  const [sortConfig, setSortConfig] = useState({\n    key: 'ROAS',\n    direction: 'desc'\n  });\n  const [bestPerformers, setBestPerformers] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [timeGranularity, setTimeGranularity] = useState('day');\n  const [processedData, setProcessedData] = useState([]);\n  const [compareMode, setCompareMode] = useState('combined');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 1. 獲取文件列表\n        const filesResponse = await fetch('http://localhost:5000/api/files');\n        console.log('Files Response Status:', filesResponse.status);\n        if (!filesResponse.ok) {\n          throw new Error(`Failed to fetch files list: ${filesResponse.status}`);\n        }\n\n        // 2. 解析文件列表\n        let files = await filesResponse.json();\n        console.log('Files List:', files);\n\n        // 確保 files 是數組\n        if (!Array.isArray(files)) {\n          console.error('Files is not an array:', files);\n          files = [];\n        }\n\n        // 3. 獲取每個文件的數據\n        if (files.length === 0) {\n          throw new Error('No files available');\n        }\n        console.log('Starting to fetch file data...');\n        const dataPromises = files.map(file => fetch(`http://localhost:5000/api/data/${file}`).then(response => {\n          if (!response.ok) {\n            throw new Error(`Failed to fetch ${file}`);\n          }\n          return response.text();\n        }).then(text => Papa.parse(text, {\n          header: true,\n          dynamicTyping: true,\n          skipEmptyLines: true\n        }).data).catch(error => {\n          console.error(`Error processing ${file}:`, error);\n          return []; // 返回空數組而不是中斷整個過程\n        }));\n\n        // 4. 等待所有數據獲取完成\n        console.log('Waiting for all data...');\n        const allData = await Promise.all(dataPromises);\n        console.log('All data received');\n\n        // 5. 處理數據\n        const combinedData = allData.flat();\n        const processedData = processCampaignData(combinedData);\n        setCampaignData(processedData);\n      } catch (error) {\n        console.error('Fetch Error:', error);\n        console.error('Error Stack:', error.stack);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const filesResponse = await fetch('http://localhost:5000/api/files');\n        if (!filesResponse.ok) {\n          throw new Error(`HTTP error! status: ${filesResponse.status}`);\n        }\n\n        // 2. 檢查檔案列表\n        const files = await filesResponse.json();\n        console.log('files:', files);\n\n        // 檢查 files 是否存在且是數組\n        if (!Array.isArray(files)) {\n          console.error('files is not an array:', files);\n          return;\n        }\n        console.log('Starting to fetch files:', files); // 調試用\n\n        const allData = await Promise.all(files.map(async file => {\n          const response = await fetch(`http://localhost:5000/api/data/${file}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch ${file}`);\n          }\n          const text = await response.text();\n          return Papa.parse(text, {\n            header: true,\n            dynamicTyping: true,\n            skipEmptyLines: true\n          }).data;\n        }));\n        const combinedData = allData.flat();\n        const campaignStats = _(combinedData).groupBy('Campaign Name').map((campaign, name) => {\n          const totalImpressions = _.sumBy(campaign, 'Impressions');\n          const totalClicks = _.sumBy(campaign, 'Clicks');\n          const totalOrders = _.sumBy(campaign, '7 Day Total Orders (#)');\n          const totalSpend = _.sumBy(campaign, row => parseFloat(row['Spend'].replace('$', '')) || 0);\n          const totalSales = _.sumBy(campaign, row => parseFloat(row['7 Day Total Sales '].replace('$', '')) || 0);\n          return {\n            name,\n            impressions: totalImpressions,\n            clicks: totalClicks,\n            orders: totalOrders,\n            spend: totalSpend,\n            sales: totalSales,\n            CTR: totalImpressions ? (totalClicks / totalImpressions * 100).toFixed(2) : 0,\n            CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\n            ACOS: totalSales ? (totalSpend / totalSales * 100).toFixed(2) : 0,\n            ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\n            conversionRate: totalClicks ? (totalOrders / totalClicks * 100).toFixed(2) : 0\n          };\n        }).value();\n        const best = {\n          highestROAS: _.maxBy(campaignStats, 'ROAS'),\n          lowestACOS: _.minBy(campaignStats.filter(c => parseFloat(c.ACOS) > 0), 'ACOS'),\n          highestCTR: _.maxBy(campaignStats, c => parseFloat(c.CTR)),\n          highestConversion: _.maxBy(campaignStats, c => parseFloat(c.conversionRate))\n        };\n        setBestPerformers(best);\n\n        // 處理趨勢數據的函數\n        const processTrendData = data => {\n          return _(data).groupBy(row => {\n            const date = new Date(row['Start Date']);\n            if (timeGranularity === 'week') {\n              const weekStart = new Date(date);\n              weekStart.setDate(date.getDate() - date.getDay());\n              return weekStart.toISOString().split('T')[0];\n            } else if (timeGranularity === 'month') {\n              return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n            }\n            return row['Start Date'];\n          }).map((group, date) => ({\n            date,\n            sales: _.sumBy(group, row => parseFloat(row['7 Day Total Sales '].replace('$', '')) || 0),\n            spend: _.sumBy(group, row => parseFloat(row['Spend'].replace('$', '')) || 0),\n            ACOS: (_.sumBy(group, row => parseFloat(row['Spend'].replace('$', '')) || 0) / _.sumBy(group, row => parseFloat(row['7 Day Total Sales '].replace('$', '')) || 1) * 100).toFixed(2)\n          })).value();\n        };\n        const trendData = processTrendData(combinedData);\n        setProcessedData(trendData);\n        setCampaignData(campaignStats);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error details:\", err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [timeGranularity]);\n  const handleSort = key => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev.key === key && prev.direction === 'desc' ? 'asc' : 'desc'\n    }));\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: \"Loading data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-red-500\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6 p-4\",\n    children: [bestPerformers && /*#__PURE__*/_jsxDEV(BestPerformersCard, {\n      bestPerformers: bestPerformers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      timeGranularity: timeGranularity,\n      setTimeGranularity: setTimeGranularity,\n      compareMode: compareMode,\n      setCompareMode: setCompareMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TrendCharts, {\n      processedData: processedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CampaignTable, {\n      campaignData: campaignData,\n      handleSort: handleSort,\n      sortConfig: sortConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(CampaignComparison, \"DB2HNkEMUQc2s4xSQV3XRmrduII=\");\n_c = CampaignComparison;\nexport default CampaignComparison;\nvar _c;\n$RefreshReg$(_c, \"CampaignComparison\");","map":{"version":3,"names":["React","useState","useEffect","Papa","_","processCampaignData","BestPerformersCard","CampaignTable","TrendCharts","ControlPanel","jsxDEV","_jsxDEV","CampaignComparison","_s","campaignData","setCampaignData","sortConfig","setSortConfig","key","direction","bestPerformers","setBestPerformers","loading","setLoading","error","setError","timeGranularity","setTimeGranularity","processedData","setProcessedData","compareMode","setCompareMode","fetchData","filesResponse","fetch","console","log","status","ok","Error","files","json","Array","isArray","length","dataPromises","map","file","then","response","text","parse","header","dynamicTyping","skipEmptyLines","data","catch","allData","Promise","all","combinedData","flat","stack","campaignStats","groupBy","campaign","name","totalImpressions","sumBy","totalClicks","totalOrders","totalSpend","row","parseFloat","replace","totalSales","impressions","clicks","orders","spend","sales","CTR","toFixed","CPC","ACOS","ROAS","conversionRate","value","best","highestROAS","maxBy","lowestACOS","minBy","filter","c","highestCTR","highestConversion","processTrendData","date","Date","weekStart","setDate","getDate","getDay","toISOString","split","getFullYear","String","getMonth","padStart","group","trendData","err","message","handleSort","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/components/CampaignDashboard/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Papa from 'papaparse';\r\nimport _ from 'lodash';\r\n// 引入數據處理邏輯\r\nimport { processCampaignData } from '../../utils/dataTransforms';\r\n\r\n// 導入子組件\r\nimport BestPerformersCard from './components/BestPerformersCard';\r\nimport CampaignTable from './components/CampaignTable';\r\nimport TrendCharts from './components/TrendCharts';\r\nimport ControlPanel from './components/ControlPanel';\r\n\r\nconst CampaignComparison = () => {\r\n  const [campaignData, setCampaignData] = useState([]);\r\n  const [sortConfig, setSortConfig] = useState({ key: 'ROAS', direction: 'desc' });\r\n  const [bestPerformers, setBestPerformers] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [timeGranularity, setTimeGranularity] = useState('day');\r\n  const [processedData, setProcessedData] = useState([]);\r\n  const [compareMode, setCompareMode] = useState('combined');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // 1. 獲取文件列表\r\n        const filesResponse = await fetch('http://localhost:5000/api/files');\r\n        console.log('Files Response Status:', filesResponse.status);\r\n        \r\n        if (!filesResponse.ok) {\r\n          throw new Error(`Failed to fetch files list: ${filesResponse.status}`);\r\n        }\r\n    \r\n        // 2. 解析文件列表\r\n        let files = await filesResponse.json();\r\n        console.log('Files List:', files);\r\n    \r\n        // 確保 files 是數組\r\n        if (!Array.isArray(files)) {\r\n          console.error('Files is not an array:', files);\r\n          files = [];\r\n        }\r\n    \r\n        // 3. 獲取每個文件的數據\r\n        if (files.length === 0) {\r\n          throw new Error('No files available');\r\n        }\r\n    \r\n        console.log('Starting to fetch file data...');\r\n        const dataPromises = files.map(file => \r\n          fetch(`http://localhost:5000/api/data/${file}`)\r\n            .then(response => {\r\n              if (!response.ok) {\r\n                throw new Error(`Failed to fetch ${file}`);\r\n              }\r\n              return response.text();\r\n            })\r\n            .then(text => Papa.parse(text, {\r\n              header: true,\r\n              dynamicTyping: true,\r\n              skipEmptyLines: true\r\n            }).data)\r\n            .catch(error => {\r\n              console.error(`Error processing ${file}:`, error);\r\n              return []; // 返回空數組而不是中斷整個過程\r\n            })\r\n        );\r\n    \r\n        // 4. 等待所有數據獲取完成\r\n        console.log('Waiting for all data...');\r\n        const allData = await Promise.all(dataPromises);\r\n        console.log('All data received');\r\n    \r\n        // 5. 處理數據\r\n        const combinedData = allData.flat();\r\n        const processedData = processCampaignData(combinedData);\r\n        setCampaignData(processedData);\r\n    \r\n      } catch (error) {\r\n        console.error('Fetch Error:', error);\r\n        console.error('Error Stack:', error.stack);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const filesResponse = await fetch('http://localhost:5000/api/files');\r\n        if (!filesResponse.ok) {\r\n          throw new Error(`HTTP error! status: ${filesResponse.status}`);\r\n        }\r\n\r\n        // 2. 檢查檔案列表\r\n        const files = await filesResponse.json();\r\n        console.log('files:', files);\r\n      \r\n        // 檢查 files 是否存在且是數組\r\n        if (!Array.isArray(files)) {\r\n          console.error('files is not an array:', files);\r\n          return;\r\n        }\r\n\r\n        console.log('Starting to fetch files:', files); // 調試用\r\n\r\n        const allData = await Promise.all(\r\n          files.map(async (file) => {\r\n            const response = await fetch(`http://localhost:5000/api/data/${file}`);\r\n            if (!response.ok) {\r\n              throw new Error(`Failed to fetch ${file}`);\r\n            }\r\n            const text = await response.text();\r\n            return Papa.parse(text, {\r\n              header: true,\r\n              dynamicTyping: true,\r\n              skipEmptyLines: true\r\n            }).data;\r\n          })\r\n        );\r\n\r\n        const combinedData = allData.flat();\r\n        \r\n        const campaignStats = _(combinedData)\r\n          .groupBy('Campaign Name')\r\n          .map((campaign, name) => {\r\n            const totalImpressions = _.sumBy(campaign, 'Impressions');\r\n            const totalClicks = _.sumBy(campaign, 'Clicks');\r\n            const totalOrders = _.sumBy(campaign, '7 Day Total Orders (#)');\r\n            const totalSpend = _.sumBy(campaign, row => parseFloat(row['Spend'].replace('$', '')) || 0);\r\n            const totalSales = _.sumBy(campaign, row => parseFloat(row['7 Day Total Sales '].replace('$', '')) || 0);\r\n\r\n            return {\r\n              name,\r\n              impressions: totalImpressions,\r\n              clicks: totalClicks,\r\n              orders: totalOrders,\r\n              spend: totalSpend,\r\n              sales: totalSales,\r\n              CTR: totalImpressions ? (totalClicks / totalImpressions * 100).toFixed(2) : 0,\r\n              CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\r\n              ACOS: totalSales ? (totalSpend / totalSales * 100).toFixed(2) : 0,\r\n              ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\r\n              conversionRate: totalClicks ? (totalOrders / totalClicks * 100).toFixed(2) : 0\r\n            };\r\n          })\r\n          .value();\r\n\r\n        const best = {\r\n          highestROAS: _.maxBy(campaignStats, 'ROAS'),\r\n          lowestACOS: _.minBy(campaignStats.filter(c => parseFloat(c.ACOS) > 0), 'ACOS'),\r\n          highestCTR: _.maxBy(campaignStats, c => parseFloat(c.CTR)),\r\n          highestConversion: _.maxBy(campaignStats, c => parseFloat(c.conversionRate))\r\n        };\r\n\r\n        setBestPerformers(best);\r\n        \r\n        // 處理趨勢數據的函數\r\n        const processTrendData = (data) => {\r\n          return _(data)\r\n            .groupBy(row => {\r\n              const date = new Date(row['Start Date']);\r\n              if (timeGranularity === 'week') {\r\n                const weekStart = new Date(date);\r\n                weekStart.setDate(date.getDate() - date.getDay());\r\n                return weekStart.toISOString().split('T')[0];\r\n              } else if (timeGranularity === 'month') {\r\n                return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n              }\r\n              return row['Start Date'];\r\n            })\r\n            .map((group, date) => ({\r\n              date,\r\n              sales: _.sumBy(group, row => parseFloat(row['7 Day Total Sales '].replace('$', '')) || 0),\r\n              spend: _.sumBy(group, row => parseFloat(row['Spend'].replace('$', '')) || 0),\r\n              ACOS: (_.sumBy(group, row => parseFloat(row['Spend'].replace('$', '')) || 0) / \r\n                     _.sumBy(group, row => parseFloat(row['7 Day Total Sales '].replace('$', '')) || 1) * 100).toFixed(2)\r\n            }))\r\n            .value();\r\n        };\r\n\r\n        const trendData = processTrendData(combinedData);\r\n        setProcessedData(trendData);\r\n        \r\n        setCampaignData(campaignStats);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error details:\", err);\r\n        setError(err.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [timeGranularity]);\r\n\r\n  const handleSort = (key) => {\r\n    setSortConfig(prev => ({\r\n      key,\r\n      direction: prev.key === key && prev.direction === 'desc' ? 'asc' : 'desc'\r\n    }));\r\n  };\r\n\r\n  if (loading) return <div className=\"p-4\">Loading data...</div>;\r\n  if (error) return <div className=\"p-4 text-red-500\">Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-4\">\r\n      {bestPerformers && (\r\n        <BestPerformersCard bestPerformers={bestPerformers} />\r\n      )}\r\n\r\n      <ControlPanel\r\n        timeGranularity={timeGranularity}\r\n        setTimeGranularity={setTimeGranularity}\r\n        compareMode={compareMode}\r\n        setCompareMode={setCompareMode}\r\n      />\r\n      <TrendCharts processedData={processedData} />\r\n      <CampaignTable \r\n        campaignData={campaignData}\r\n        handleSort={handleSort}\r\n        sortConfig={sortConfig}\r\n      />\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampaignComparison;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}