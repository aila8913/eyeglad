{"ast":null,"code":"import _ from \"lodash\";\n\n// 共用的工具函數\nconst parseCurrencyValue = value => {\n  if (typeof value !== \"string\") return 0;\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\n};\nconst calculateRate = (numerator, denominator, decimals = 2) => {\n  if (typeof numerator !== \"number\" || typeof denominator !== \"number\") {\n    return null;\n  }\n  return denominator > 0 ? (numerator / denominator * 100).toFixed(decimals) : null;\n};\nconst findBestPerformers = stats => {\n  if (!Array.isArray(stats) || stats.length === 0) {\n    return null;\n  }\n  return {\n    highestROAS: _.maxBy(stats, s => parseFloat(s.ROAS) || 0),\n    lowestACOS: _.minBy(stats.filter(c => parseFloat(c.ACOS) > 0), s => parseFloat(s.ACOS) || Infinity),\n    highestCTR: _.maxBy(stats, s => parseFloat(s.CTR) || 0),\n    highestConversion: _.maxBy(stats, s => parseFloat(s.conversionRate) || 0)\n  };\n};\nexport const processCampaignData = data => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return {\n      stats: [],\n      best: null\n    };\n  }\n  try {\n    const stats = _(data).groupBy(\"Campaign Name\").map((campaign, name) => {\n      // 使用 Number 確保數值類型\n      const totalImpressions = _.sumBy(campaign, row => Number(row.Impressions) || 0);\n      const totalClicks = _.sumBy(campaign, row => Number(row.Clicks) || 0);\n      const totalOrders = _.sumBy(campaign, row => Number(row[\"7 Day Total Orders (#)\"]) || 0);\n      const totalSpend = _.sumBy(campaign, row => parseCurrencyValue(row.Spend));\n      const totalSales = _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"]));\n\n      // 預先計算避免重複運算\n      const ctr = calculateRate(totalClicks, totalImpressions);\n      const cpc = totalClicks ? (totalSpend / totalClicks).toFixed(2) : \"0\";\n      const acos = calculateRate(totalSpend, totalSales);\n      const roas = totalSpend ? (totalSales / totalSpend).toFixed(2) : \"0\";\n      const convRate = calculateRate(totalOrders, totalClicks);\n      return {\n        name,\n        impressions: totalImpressions,\n        clicks: totalClicks,\n        orders: totalOrders,\n        spend: totalSpend,\n        sales: totalSales,\n        CTR: ctr,\n        CPC: cpc,\n        ACOS: acos,\n        ROAS: roas,\n        conversionRate: convRate\n      };\n    }).value();\n    return {\n      stats,\n      best: findBestPerformers(stats)\n    };\n  } catch (error) {\n    console.error(\"Error processing campaign data:\", error);\n    return {\n      stats: [],\n      best: null\n    };\n  }\n};\nconst getDateKey = (dateStr, hour, timeGranularity) => {\n  if (!dateStr) return null;\n  try {\n    const date = new Date(dateStr);\n    if (isNaN(date.getTime())) return null;\n    switch (timeGranularity) {\n      case \"hour\":\n        {\n          const formattedHour = String(hour || 0).padStart(2, \"0\");\n          return `${dateStr} ${formattedHour}:00`;\n        }\n      case \"week\":\n        {\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          return weekStart.toISOString().split(\"T\")[0];\n        }\n      case \"month\":\n        {\n          return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\n        }\n      default:\n        // day\n        return dateStr;\n    }\n  } catch (error) {\n    console.error(\"Error generating date key:\", error);\n    return null;\n  }\n};\nexport const processTrendData = (data, timeGranularity = \"day\", compareMode = \"combined\") => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return [];\n  }\n  try {\n    const processedData = _(data).groupBy(row => {\n      const dateKey = getDateKey(row[\"Start Date\"], row[\"Hour\"], timeGranularity);\n      return dateKey || \"invalid_date\";\n    }).map((group, dateTime) => {\n      if (dateTime === \"invalid_date\") return null;\n\n      // 計算該時間點的總計數據\n      const totalSales = _.sumBy(group, row => parseCurrencyValue(row[\"7 Day Total Sales \"]));\n      const totalSpend = _.sumBy(group, row => parseCurrencyValue(row[\"Spend\"]));\n      const acos = calculateRate(totalSpend, totalSales);\n      const result = {\n        date: dateTime,\n        sales: totalSales,\n        spend: totalSpend,\n        ACOS: acos\n      };\n      if (compareMode === \"separate\") {\n        result.campaignData = _(group).groupBy(\"Campaign Name\").mapValues(campaign => ({\n          sales: _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"])),\n          spend: _.sumBy(campaign, row => parseCurrencyValue(row[\"Spend\"]))\n        })).value();\n      }\n      return result;\n    }).compact() // 移除無效的數據\n    .orderBy([\"date\"], [\"asc\"]).value();\n    return processedData;\n  } catch (error) {\n    console.error(\"Error processing trend data:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["_","parseCurrencyValue","value","parseFloat","replace","calculateRate","numerator","denominator","decimals","toFixed","findBestPerformers","stats","Array","isArray","length","highestROAS","maxBy","s","ROAS","lowestACOS","minBy","filter","c","ACOS","Infinity","highestCTR","CTR","highestConversion","conversionRate","processCampaignData","data","console","error","best","groupBy","map","campaign","name","totalImpressions","sumBy","row","Number","Impressions","totalClicks","Clicks","totalOrders","totalSpend","Spend","totalSales","ctr","cpc","acos","roas","convRate","impressions","clicks","orders","spend","sales","CPC","getDateKey","dateStr","hour","timeGranularity","date","Date","isNaN","getTime","formattedHour","String","padStart","weekStart","setDate","getDate","getDay","toISOString","split","getFullYear","getMonth","processTrendData","compareMode","processedData","dateKey","group","dateTime","result","campaignData","mapValues","compact","orderBy"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/utils/dataTransforms.js"],"sourcesContent":["import _ from \"lodash\";\r\n\r\n// 共用的工具函數\r\nconst parseCurrencyValue = (value) => {\r\n  if (typeof value !== \"string\") return 0;\r\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\r\n};\r\n\r\nconst calculateRate = (numerator, denominator, decimals = 2) => {\r\n  if (typeof numerator !== \"number\" || typeof denominator !== \"number\") {\r\n    return null;\r\n  }\r\n  return denominator > 0\r\n    ? ((numerator / denominator) * 100).toFixed(decimals)\r\n    : null;\r\n};\r\n\r\nconst findBestPerformers = (stats) => {\r\n  if (!Array.isArray(stats) || stats.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    highestROAS: _.maxBy(stats, (s) => parseFloat(s.ROAS) || 0),\r\n    lowestACOS: _.minBy(\r\n      stats.filter((c) => parseFloat(c.ACOS) > 0),\r\n      (s) => parseFloat(s.ACOS) || Infinity\r\n    ),\r\n    highestCTR: _.maxBy(stats, (s) => parseFloat(s.CTR) || 0),\r\n    highestConversion: _.maxBy(stats, (s) => parseFloat(s.conversionRate) || 0),\r\n  };\r\n};\r\n\r\nexport const processCampaignData = (data) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return { stats: [], best: null };\r\n  }\r\n\r\n  try {\r\n    const stats = _(data)\r\n      .groupBy(\"Campaign Name\")\r\n      .map((campaign, name) => {\r\n        // 使用 Number 確保數值類型\r\n        const totalImpressions = _.sumBy(\r\n          campaign,\r\n          (row) => Number(row.Impressions) || 0\r\n        );\r\n        const totalClicks = _.sumBy(campaign, (row) => Number(row.Clicks) || 0);\r\n        const totalOrders = _.sumBy(\r\n          campaign,\r\n          (row) => Number(row[\"7 Day Total Orders (#)\"]) || 0\r\n        );\r\n        const totalSpend = _.sumBy(campaign, (row) =>\r\n          parseCurrencyValue(row.Spend)\r\n        );\r\n        const totalSales = _.sumBy(campaign, (row) =>\r\n          parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n        );\r\n\r\n        // 預先計算避免重複運算\r\n        const ctr = calculateRate(totalClicks, totalImpressions);\r\n        const cpc = totalClicks ? (totalSpend / totalClicks).toFixed(2) : \"0\";\r\n        const acos = calculateRate(totalSpend, totalSales);\r\n        const roas = totalSpend ? (totalSales / totalSpend).toFixed(2) : \"0\";\r\n        const convRate = calculateRate(totalOrders, totalClicks);\r\n\r\n        return {\r\n          name,\r\n          impressions: totalImpressions,\r\n          clicks: totalClicks,\r\n          orders: totalOrders,\r\n          spend: totalSpend,\r\n          sales: totalSales,\r\n          CTR: ctr,\r\n          CPC: cpc,\r\n          ACOS: acos,\r\n          ROAS: roas,\r\n          conversionRate: convRate,\r\n        };\r\n      })\r\n      .value();\r\n\r\n    return {\r\n      stats,\r\n      best: findBestPerformers(stats),\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error processing campaign data:\", error);\r\n    return { stats: [], best: null };\r\n  }\r\n};\r\n\r\nconst getDateKey = (dateStr, hour, timeGranularity) => {\r\n  if (!dateStr) return null;\r\n\r\n  try {\r\n    const date = new Date(dateStr);\r\n    if (isNaN(date.getTime())) return null;\r\n\r\n    switch (timeGranularity) {\r\n      case \"hour\": {\r\n        const formattedHour = String(hour || 0).padStart(2, \"0\");\r\n        return `${dateStr} ${formattedHour}:00`;\r\n      }\r\n      case \"week\": {\r\n        const weekStart = new Date(date);\r\n        weekStart.setDate(date.getDate() - date.getDay());\r\n        return weekStart.toISOString().split(\"T\")[0];\r\n      }\r\n      case \"month\": {\r\n        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\r\n          2,\r\n          \"0\"\r\n        )}`;\r\n      }\r\n      default: // day\r\n        return dateStr;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error generating date key:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const processTrendData = (\r\n  data,\r\n  timeGranularity = \"day\",\r\n  compareMode = \"combined\"\r\n) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    const processedData = _(data)\r\n      .groupBy((row) => {\r\n        const dateKey = getDateKey(\r\n          row[\"Start Date\"],\r\n          row[\"Hour\"],\r\n          timeGranularity\r\n        );\r\n        return dateKey || \"invalid_date\";\r\n      })\r\n      .map((group, dateTime) => {\r\n        if (dateTime === \"invalid_date\") return null;\r\n\r\n        // 計算該時間點的總計數據\r\n        const totalSales = _.sumBy(group, (row) =>\r\n          parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n        );\r\n        const totalSpend = _.sumBy(group, (row) =>\r\n          parseCurrencyValue(row[\"Spend\"])\r\n        );\r\n        const acos = calculateRate(totalSpend, totalSales);\r\n\r\n        const result = {\r\n          date: dateTime,\r\n          sales: totalSales,\r\n          spend: totalSpend,\r\n          ACOS: acos,\r\n        };\r\n\r\n        if (compareMode === \"separate\") {\r\n          result.campaignData = _(group)\r\n            .groupBy(\"Campaign Name\")\r\n            .mapValues((campaign) => ({\r\n              sales: _.sumBy(campaign, (row) =>\r\n                parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n              ),\r\n              spend: _.sumBy(campaign, (row) =>\r\n                parseCurrencyValue(row[\"Spend\"])\r\n              ),\r\n            }))\r\n            .value();\r\n        }\r\n\r\n        return result;\r\n      })\r\n      .compact() // 移除無效的數據\r\n      .orderBy([\"date\"], [\"asc\"])\r\n      .value();\r\n\r\n    return processedData;\r\n  } catch (error) {\r\n    console.error(\"Error processing trend data:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}