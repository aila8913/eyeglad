{"ast":null,"code":"// dataTransforms.js\nimport _ from \"lodash\";\n\n// 共用的工具函數\nconst parseCurrencyValue = value => {\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\n};\nconst calculateRate = (numerator, denominator, decimals = 2) => {\n  return denominator > 0 ? (numerator / denominator * 100).toFixed(decimals) : null;\n};\nconst findBestPerformers = stats => {\n  return {\n    highestROAS: _.maxBy(stats, \"ROAS\"),\n    lowestACOS: _.minBy(stats.filter(c => parseFloat(c.ACOS) > 0), \"ACOS\"),\n    highestCTR: _.maxBy(stats, c => parseFloat(c.CTR)),\n    highestConversion: _.maxBy(stats, c => parseFloat(c.conversionRate))\n  };\n};\n\n// 主要的導出函數\nexport const processCampaignData = data => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return {\n      stats: [],\n      best: null\n    };\n  }\n  const stats = _(data).groupBy(\"Campaign Name\").map((campaign, name) => {\n    const totalImpressions = _.sumBy(campaign, \"Impressions\");\n    const totalClicks = _.sumBy(campaign, \"Clicks\");\n    const totalOrders = _.sumBy(campaign, \"7 Day Total Orders (#)\");\n    const totalSpend = _.sumBy(campaign, row => parseCurrencyValue(row[\"Spend\"]));\n    const totalSales = _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"]));\n    return {\n      name,\n      impressions: totalImpressions,\n      clicks: totalClicks,\n      orders: totalOrders,\n      spend: totalSpend,\n      sales: totalSales,\n      CTR: calculateRate(totalClicks, totalImpressions),\n      CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\n      ACOS: calculateRate(totalSpend, totalSales),\n      ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\n      conversionRate: calculateRate(totalOrders, totalClicks)\n    };\n  }).value();\n  return {\n    stats,\n    best: findBestPerformers(stats)\n  };\n};\n\n// 添加時間格式化函數\nconst formatDateTime = (date, hour) => {\n  // 確保 hour 是字符串且至少兩位數\n  const paddedHour = String(hour || \"00\").padStart(2, \"0\");\n  return `${date} ${paddedHour}:00:00`;\n};\nconst getDateKey = (dateStr, hour, timeGranularity) => {\n  const date = new Date(dateStr);\n  switch (timeGranularity) {\n    case \"hour\":\n      {\n        // 確保每個小時都有獨立數據\n        const formattedHour = String(hour || 0).padStart(2, \"0\");\n        return `${dateStr} ${formattedHour}:00`;\n      }\n    case \"week\":\n      {\n        const weekStart = new Date(date);\n        weekStart.setDate(date.getDate() - date.getDay());\n        return weekStart.toISOString().split(\"T\")[0];\n      }\n    case \"month\":\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\n    default:\n      // day\n      return dateStr;\n  }\n};\nexport const processTrendData = (data, timeGranularity = \"day\", compareMode = \"combined\") => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return [];\n  }\n  return _(data).groupBy(row => {\n    return getDateKey(row[\"Start Date\"], row[\"Hour\"], timeGranularity);\n  }).map((group, dateTime) => {\n    // 計算該時間點的總計數據\n    const totalSales = _.sumBy(group, row => parseCurrencyValue(row[\"7 Day Total Sales \"]));\n    const totalSpend = _.sumBy(group, row => parseCurrencyValue(row[\"Spend\"]));\n    const result = {\n      date: dateTime,\n      sales: totalSales,\n      spend: totalSpend,\n      ACOS: calculateRate(totalSpend, totalSales)\n    };\n    if (compareMode === \"separate\") {\n      result.campaignData = _(group).groupBy(\"Campaign Name\").mapValues(campaign => ({\n        sales: _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"])),\n        spend: _.sumBy(campaign, row => parseCurrencyValue(row[\"Spend\"]))\n      })).value();\n    }\n    return result;\n  }).orderBy([\"date\"], [\"asc\"]).value();\n};","map":{"version":3,"names":["_","parseCurrencyValue","value","parseFloat","replace","calculateRate","numerator","denominator","decimals","toFixed","findBestPerformers","stats","highestROAS","maxBy","lowestACOS","minBy","filter","c","ACOS","highestCTR","CTR","highestConversion","conversionRate","processCampaignData","data","Array","isArray","console","error","best","groupBy","map","campaign","name","totalImpressions","sumBy","totalClicks","totalOrders","totalSpend","row","totalSales","impressions","clicks","orders","spend","sales","CPC","ROAS","formatDateTime","date","hour","paddedHour","String","padStart","getDateKey","dateStr","timeGranularity","Date","formattedHour","weekStart","setDate","getDate","getDay","toISOString","split","getFullYear","getMonth","processTrendData","compareMode","group","dateTime","result","campaignData","mapValues","orderBy"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/utils/dataTransforms.js"],"sourcesContent":["// dataTransforms.js\r\nimport _ from \"lodash\";\r\n\r\n// 共用的工具函數\r\nconst parseCurrencyValue = (value) => {\r\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\r\n};\r\n\r\nconst calculateRate = (numerator, denominator, decimals = 2) => {\r\n  return denominator > 0\r\n    ? ((numerator / denominator) * 100).toFixed(decimals)\r\n    : null;\r\n};\r\n\r\nconst findBestPerformers = (stats) => {\r\n  return {\r\n    highestROAS: _.maxBy(stats, \"ROAS\"),\r\n    lowestACOS: _.minBy(\r\n      stats.filter((c) => parseFloat(c.ACOS) > 0),\r\n      \"ACOS\"\r\n    ),\r\n    highestCTR: _.maxBy(stats, (c) => parseFloat(c.CTR)),\r\n    highestConversion: _.maxBy(stats, (c) => parseFloat(c.conversionRate)),\r\n  };\r\n};\r\n\r\n// 主要的導出函數\r\nexport const processCampaignData = (data) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return { stats: [], best: null };\r\n  }\r\n\r\n  const stats = _(data)\r\n    .groupBy(\"Campaign Name\")\r\n    .map((campaign, name) => {\r\n      const totalImpressions = _.sumBy(campaign, \"Impressions\");\r\n      const totalClicks = _.sumBy(campaign, \"Clicks\");\r\n      const totalOrders = _.sumBy(campaign, \"7 Day Total Orders (#)\");\r\n      const totalSpend = _.sumBy(campaign, (row) =>\r\n        parseCurrencyValue(row[\"Spend\"])\r\n      );\r\n      const totalSales = _.sumBy(campaign, (row) =>\r\n        parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n      );\r\n\r\n      return {\r\n        name,\r\n        impressions: totalImpressions,\r\n        clicks: totalClicks,\r\n        orders: totalOrders,\r\n        spend: totalSpend,\r\n        sales: totalSales,\r\n        CTR: calculateRate(totalClicks, totalImpressions),\r\n        CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\r\n        ACOS: calculateRate(totalSpend, totalSales),\r\n        ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\r\n        conversionRate: calculateRate(totalOrders, totalClicks),\r\n      };\r\n    })\r\n    .value();\r\n\r\n  return {\r\n    stats,\r\n    best: findBestPerformers(stats),\r\n  };\r\n};\r\n\r\n// 添加時間格式化函數\r\nconst formatDateTime = (date, hour) => {\r\n  // 確保 hour 是字符串且至少兩位數\r\n  const paddedHour = String(hour || \"00\").padStart(2, \"0\");\r\n  return `${date} ${paddedHour}:00:00`;\r\n};\r\n\r\nconst getDateKey = (dateStr, hour, timeGranularity) => {\r\n  const date = new Date(dateStr);\r\n\r\n  switch (timeGranularity) {\r\n    case \"hour\": {\r\n      // 確保每個小時都有獨立數據\r\n      const formattedHour = String(hour || 0).padStart(2, \"0\");\r\n      return `${dateStr} ${formattedHour}:00`;\r\n    }\r\n    case \"week\": {\r\n      const weekStart = new Date(date);\r\n      weekStart.setDate(date.getDate() - date.getDay());\r\n      return weekStart.toISOString().split(\"T\")[0];\r\n    }\r\n    case \"month\":\r\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\r\n        2,\r\n        \"0\"\r\n      )}`;\r\n    default: // day\r\n      return dateStr;\r\n  }\r\n};\r\n\r\nexport const processTrendData = (\r\n  data,\r\n  timeGranularity = \"day\",\r\n  compareMode = \"combined\"\r\n) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return [];\r\n  }\r\n\r\n  return _(data)\r\n    .groupBy((row) => {\r\n      return getDateKey(row[\"Start Date\"], row[\"Hour\"], timeGranularity);\r\n    })\r\n    .map((group, dateTime) => {\r\n      // 計算該時間點的總計數據\r\n      const totalSales = _.sumBy(group, (row) =>\r\n        parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n      );\r\n      const totalSpend = _.sumBy(group, (row) =>\r\n        parseCurrencyValue(row[\"Spend\"])\r\n      );\r\n\r\n      const result = {\r\n        date: dateTime,\r\n        sales: totalSales,\r\n        spend: totalSpend,\r\n        ACOS: calculateRate(totalSpend, totalSales),\r\n      };\r\n\r\n      if (compareMode === \"separate\") {\r\n        result.campaignData = _(group)\r\n          .groupBy(\"Campaign Name\")\r\n          .mapValues((campaign) => ({\r\n            sales: _.sumBy(campaign, (row) =>\r\n              parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n            ),\r\n            spend: _.sumBy(campaign, (row) => parseCurrencyValue(row[\"Spend\"])),\r\n          }))\r\n          .value();\r\n      }\r\n\r\n      return result;\r\n    })\r\n    .orderBy([\"date\"], [\"asc\"])\r\n    .value();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}