{"ast":null,"code":"// dataTransforms.js\nimport _ from \"lodash\";\n\n// 共用的數值解析函數\nconst parseCurrencyValue = value => {\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\n};\n\n// 共用的比率計算函數\nconst calculateRate = (numerator, denominator, decimals = 2) => {\n  return denominator > 0 ? (numerator / denominator * 100).toFixed(decimals) : null;\n};\n\n// 基礎數據處理\nexport const processCampaignData = data => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return {\n      stats: [],\n      best: null\n    };\n  }\n  const stats = _(data).groupBy(\"Campaign Name\").map((campaign, name) => {\n    const totalImpressions = _.sumBy(campaign, \"Impressions\");\n    const totalClicks = _.sumBy(campaign, \"Clicks\");\n    const totalOrders = _.sumBy(campaign, \"7 Day Total Orders (#)\");\n    const totalSpend = _.sumBy(campaign, row => parseCurrencyValue(row[\"Spend\"]));\n    const totalSales = _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"]));\n    return {\n      name,\n      impressions: totalImpressions,\n      clicks: totalClicks,\n      orders: totalOrders,\n      spend: totalSpend,\n      sales: totalSales,\n      CTR: calculateRate(totalClicks, totalImpressions),\n      CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\n      ACOS: calculateRate(totalSpend, totalSales),\n      ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\n      conversionRate: calculateRate(totalOrders, totalClicks)\n    };\n  }).value();\n  return {\n    stats,\n    best: findBestPerformers(stats)\n  };\n};\n\n// 找出最佳表現者\nconst findBestPerformers = stats => {\n  return {\n    highestROAS: _.maxBy(stats, \"ROAS\"),\n    lowestACOS: _.minBy(stats.filter(c => parseFloat(c.ACOS) > 0), \"ACOS\"),\n    highestCTR: _.maxBy(stats, c => parseFloat(c.CTR)),\n    highestConversion: _.maxBy(stats, c => parseFloat(c.conversionRate))\n  };\n};\n\n// 趨勢數據處理\nexport const processTrendData = (data, timeGranularity = \"day\", compareMode = \"combined\") => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return [];\n  }\n  const getDateKey = date => {\n    switch (timeGranularity) {\n      case \"week\":\n        const weekStart = new Date(date);\n        weekStart.setDate(date.getDate() - date.getDay());\n        return weekStart.toISOString().split(\"T\")[0];\n      case \"month\":\n        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\n      default:\n        return date;\n    }\n  };\n  return _(data).groupBy(row => getDateKey(new Date(row[\"Start Date\"]))).map((group, date) => {\n    const metrics = {\n      date,\n      sales: _.sumBy(group, row => parseCurrencyValue(row[\"7 Day Total Sales \"])),\n      spend: _.sumBy(group, row => parseCurrencyValue(row[\"Spend\"]))\n    };\n\n    // 處理分組比較模式\n    if (compareMode === \"separate\") {\n      metrics.campaignData = _(group).groupBy(\"Campaign Name\").mapValues(campaign => ({\n        sales: _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"])),\n        spend: _.sumBy(campaign, row => parseCurrencyValue(row[\"Spend\"]))\n      })).value();\n    }\n\n    // 計算 ACOS\n    metrics.ACOS = calculateRate(metrics.spend, metrics.sales);\n    return metrics;\n  }).orderBy(\"date\", \"asc\").value();\n};","map":{"version":3,"names":["_","parseCurrencyValue","value","parseFloat","replace","calculateRate","numerator","denominator","decimals","toFixed","processCampaignData","data","Array","isArray","console","error","stats","best","groupBy","map","campaign","name","totalImpressions","sumBy","totalClicks","totalOrders","totalSpend","row","totalSales","impressions","clicks","orders","spend","sales","CTR","CPC","ACOS","ROAS","conversionRate","findBestPerformers","highestROAS","maxBy","lowestACOS","minBy","filter","c","highestCTR","highestConversion","processTrendData","timeGranularity","compareMode","getDateKey","date","weekStart","Date","setDate","getDate","getDay","toISOString","split","getFullYear","String","getMonth","padStart","group","metrics","campaignData","mapValues","orderBy"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/utils/dataTransforms.js"],"sourcesContent":["// dataTransforms.js\r\nimport _ from \"lodash\";\r\n\r\n// 共用的數值解析函數\r\nconst parseCurrencyValue = (value) => {\r\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\r\n};\r\n\r\n// 共用的比率計算函數\r\nconst calculateRate = (numerator, denominator, decimals = 2) => {\r\n  return denominator > 0\r\n    ? ((numerator / denominator) * 100).toFixed(decimals)\r\n    : null;\r\n};\r\n\r\n// 基礎數據處理\r\nexport const processCampaignData = (data) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return { stats: [], best: null };\r\n  }\r\n\r\n  const stats = _(data)\r\n    .groupBy(\"Campaign Name\")\r\n    .map((campaign, name) => {\r\n      const totalImpressions = _.sumBy(campaign, \"Impressions\");\r\n      const totalClicks = _.sumBy(campaign, \"Clicks\");\r\n      const totalOrders = _.sumBy(campaign, \"7 Day Total Orders (#)\");\r\n      const totalSpend = _.sumBy(campaign, (row) =>\r\n        parseCurrencyValue(row[\"Spend\"])\r\n      );\r\n      const totalSales = _.sumBy(campaign, (row) =>\r\n        parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n      );\r\n\r\n      return {\r\n        name,\r\n        impressions: totalImpressions,\r\n        clicks: totalClicks,\r\n        orders: totalOrders,\r\n        spend: totalSpend,\r\n        sales: totalSales,\r\n        CTR: calculateRate(totalClicks, totalImpressions),\r\n        CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\r\n        ACOS: calculateRate(totalSpend, totalSales),\r\n        ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\r\n        conversionRate: calculateRate(totalOrders, totalClicks),\r\n      };\r\n    })\r\n    .value();\r\n\r\n  return {\r\n    stats,\r\n    best: findBestPerformers(stats),\r\n  };\r\n};\r\n\r\n// 找出最佳表現者\r\nconst findBestPerformers = (stats) => {\r\n  return {\r\n    highestROAS: _.maxBy(stats, \"ROAS\"),\r\n    lowestACOS: _.minBy(\r\n      stats.filter((c) => parseFloat(c.ACOS) > 0),\r\n      \"ACOS\"\r\n    ),\r\n    highestCTR: _.maxBy(stats, (c) => parseFloat(c.CTR)),\r\n    highestConversion: _.maxBy(stats, (c) => parseFloat(c.conversionRate)),\r\n  };\r\n};\r\n\r\n// 趨勢數據處理\r\nexport const processTrendData = (\r\n  data,\r\n  timeGranularity = \"day\",\r\n  compareMode = \"combined\"\r\n) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return [];\r\n  }\r\n\r\n  const getDateKey = (date) => {\r\n    switch (timeGranularity) {\r\n      case \"week\":\r\n        const weekStart = new Date(date);\r\n        weekStart.setDate(date.getDate() - date.getDay());\r\n        return weekStart.toISOString().split(\"T\")[0];\r\n      case \"month\":\r\n        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\r\n          2,\r\n          \"0\"\r\n        )}`;\r\n      default:\r\n        return date;\r\n    }\r\n  };\r\n\r\n  return _(data)\r\n    .groupBy((row) => getDateKey(new Date(row[\"Start Date\"])))\r\n    .map((group, date) => {\r\n      const metrics = {\r\n        date,\r\n        sales: _.sumBy(group, (row) =>\r\n          parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n        ),\r\n        spend: _.sumBy(group, (row) => parseCurrencyValue(row[\"Spend\"])),\r\n      };\r\n\r\n      // 處理分組比較模式\r\n      if (compareMode === \"separate\") {\r\n        metrics.campaignData = _(group)\r\n          .groupBy(\"Campaign Name\")\r\n          .mapValues((campaign) => ({\r\n            sales: _.sumBy(campaign, (row) =>\r\n              parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n            ),\r\n            spend: _.sumBy(campaign, (row) => parseCurrencyValue(row[\"Spend\"])),\r\n          }))\r\n          .value();\r\n      }\r\n\r\n      // 計算 ACOS\r\n      metrics.ACOS = calculateRate(metrics.spend, metrics.sales);\r\n\r\n      return metrics;\r\n    })\r\n    .orderBy(\"date\", \"asc\")\r\n    .value();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}