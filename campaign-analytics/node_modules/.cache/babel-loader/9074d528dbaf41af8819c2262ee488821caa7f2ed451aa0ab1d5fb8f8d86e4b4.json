{"ast":null,"code":"import Papa from \"papaparse\";\nconst parseCSV = (text, filename) => {\n  try {\n    const result = Papa.parse(text, {\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      error: error => {\n        console.error(`CSV parsing error in ${filename}:`, error);\n      }\n    });\n    if (!result.data || !Array.isArray(result.data)) {\n      console.error(`Invalid CSV data structure in ${filename}`);\n      return [];\n    }\n\n    // 驗證資料結構\n    return result.data.filter(row => {\n      const hasRequiredFields = row[\"Campaign Name\"] && row[\"Start Date\"] && row[\"Spend\"] !== undefined && row[\"7 Day Total Sales \"] !== undefined;\n      if (!hasRequiredFields) {\n        console.warn(`Skipping invalid row in ${filename}:`, row);\n      }\n      return hasRequiredFields;\n    });\n  } catch (error) {\n    console.error(`Error parsing ${filename}:`, error);\n    return [];\n  }\n};\nconst fetchWithTimeout = async (url, options = {}, timeout = 5000) => {\n  const controller = new AbortController();\n  const id = setTimeout(() => controller.abort(), timeout);\n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal\n    });\n    clearTimeout(id);\n    return response;\n  } catch (error) {\n    clearTimeout(id);\n    throw error;\n  }\n};\nexport const fetchCampaignData = async onProgress => {\n  const progress = message => {\n    console.log(message);\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(message);\n  };\n  try {\n    progress(\"開始載入資料\");\n\n    // 1. 獲取檔案列表\n    let filesResponse;\n    try {\n      filesResponse = await fetchWithTimeout(\"http://localhost:5000/api/files\");\n      progress(`檔案列表回應狀態: ${filesResponse.status}`);\n    } catch (error) {\n      throw new Error(`無法連接到伺服器: ${error.message}`);\n    }\n    if (!filesResponse.ok) {\n      throw new Error(`獲取檔案列表失敗: ${filesResponse.status}`);\n    }\n\n    // 2. 解析檔案列表\n    let files;\n    try {\n      files = await filesResponse.json();\n      progress(`取得檔案列表: ${files.length} 個檔案`);\n    } catch (error) {\n      throw new Error(`解析檔案列表失敗: ${error.message}`);\n    }\n    if (!Array.isArray(files) || files.length === 0) {\n      throw new Error(\"沒有可用的檔案\");\n    }\n\n    // 3. 分批處理檔案\n    const BATCH_SIZE = 3; // 同時處理的檔案數\n    const batches = [];\n    for (let i = 0; i < files.length; i += BATCH_SIZE) {\n      batches.push(files.slice(i, i + BATCH_SIZE));\n    }\n\n    // 4. 依序處理每一批檔案\n    let allData = [];\n    for (let [index, batch] of batches.entries()) {\n      progress(`處理第 ${index + 1}/${batches.length} 批檔案`);\n      const batchPromises = batch.map(async file => {\n        try {\n          const response = await fetchWithTimeout(`http://localhost:5000/api/data/${file}`, {}, 10000);\n          if (!response.ok) {\n            progress(`檔案 ${file} 載入失敗: ${response.status}`);\n            return [];\n          }\n          const text = await response.text();\n          progress(`解析 ${file} 內容`);\n          return parseCSV(text, file);\n        } catch (error) {\n          console.error(`處理檔案 ${file} 時發生錯誤:`, error);\n          progress(`檔案 ${file} 處理失敗: ${error.message}`);\n          return [];\n        }\n      });\n      const batchData = await Promise.all(batchPromises);\n      allData = allData.concat(batchData.flat());\n    }\n\n    // 5. 驗證最終資料\n    if (allData.length === 0) {\n      throw new Error(\"沒有有效的資料可供處理\");\n    }\n    progress(`資料處理完成，共 ${allData.length} 筆記錄`);\n    return allData;\n  } catch (error) {\n    console.error(\"資料載入過程發生錯誤:\", error);\n    throw new Error(`資料載入失敗: ${error.message}`);\n  }\n};","map":{"version":3,"names":["Papa","parseCSV","text","filename","result","parse","header","dynamicTyping","skipEmptyLines","error","console","data","Array","isArray","filter","row","hasRequiredFields","undefined","warn","fetchWithTimeout","url","options","timeout","controller","AbortController","id","setTimeout","abort","response","fetch","signal","clearTimeout","fetchCampaignData","onProgress","progress","message","log","filesResponse","status","Error","ok","files","json","length","BATCH_SIZE","batches","i","push","slice","allData","index","batch","entries","batchPromises","map","file","batchData","Promise","all","concat","flat"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/utils/api.js"],"sourcesContent":["import Papa from \"papaparse\";\r\n\r\nconst parseCSV = (text, filename) => {\r\n  try {\r\n    const result = Papa.parse(text, {\r\n      header: true,\r\n      dynamicTyping: true,\r\n      skipEmptyLines: true,\r\n      error: (error) => {\r\n        console.error(`CSV parsing error in ${filename}:`, error);\r\n      },\r\n    });\r\n\r\n    if (!result.data || !Array.isArray(result.data)) {\r\n      console.error(`Invalid CSV data structure in ${filename}`);\r\n      return [];\r\n    }\r\n\r\n    // 驗證資料結構\r\n    return result.data.filter((row) => {\r\n      const hasRequiredFields =\r\n        row[\"Campaign Name\"] &&\r\n        row[\"Start Date\"] &&\r\n        row[\"Spend\"] !== undefined &&\r\n        row[\"7 Day Total Sales \"] !== undefined;\r\n\r\n      if (!hasRequiredFields) {\r\n        console.warn(`Skipping invalid row in ${filename}:`, row);\r\n      }\r\n      return hasRequiredFields;\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error parsing ${filename}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst fetchWithTimeout = async (url, options = {}, timeout = 5000) => {\r\n  const controller = new AbortController();\r\n  const id = setTimeout(() => controller.abort(), timeout);\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      signal: controller.signal,\r\n    });\r\n    clearTimeout(id);\r\n    return response;\r\n  } catch (error) {\r\n    clearTimeout(id);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchCampaignData = async (onProgress) => {\r\n  const progress = (message) => {\r\n    console.log(message);\r\n    onProgress?.(message);\r\n  };\r\n\r\n  try {\r\n    progress(\"開始載入資料\");\r\n\r\n    // 1. 獲取檔案列表\r\n    let filesResponse;\r\n    try {\r\n      filesResponse = await fetchWithTimeout(\"http://localhost:5000/api/files\");\r\n      progress(`檔案列表回應狀態: ${filesResponse.status}`);\r\n    } catch (error) {\r\n      throw new Error(`無法連接到伺服器: ${error.message}`);\r\n    }\r\n\r\n    if (!filesResponse.ok) {\r\n      throw new Error(`獲取檔案列表失敗: ${filesResponse.status}`);\r\n    }\r\n\r\n    // 2. 解析檔案列表\r\n    let files;\r\n    try {\r\n      files = await filesResponse.json();\r\n      progress(`取得檔案列表: ${files.length} 個檔案`);\r\n    } catch (error) {\r\n      throw new Error(`解析檔案列表失敗: ${error.message}`);\r\n    }\r\n\r\n    if (!Array.isArray(files) || files.length === 0) {\r\n      throw new Error(\"沒有可用的檔案\");\r\n    }\r\n\r\n    // 3. 分批處理檔案\r\n    const BATCH_SIZE = 3; // 同時處理的檔案數\r\n    const batches = [];\r\n    for (let i = 0; i < files.length; i += BATCH_SIZE) {\r\n      batches.push(files.slice(i, i + BATCH_SIZE));\r\n    }\r\n\r\n    // 4. 依序處理每一批檔案\r\n    let allData = [];\r\n    for (let [index, batch] of batches.entries()) {\r\n      progress(`處理第 ${index + 1}/${batches.length} 批檔案`);\r\n\r\n      const batchPromises = batch.map(async (file) => {\r\n        try {\r\n          const response = await fetchWithTimeout(\r\n            `http://localhost:5000/api/data/${file}`,\r\n            {},\r\n            10000\r\n          );\r\n\r\n          if (!response.ok) {\r\n            progress(`檔案 ${file} 載入失敗: ${response.status}`);\r\n            return [];\r\n          }\r\n\r\n          const text = await response.text();\r\n          progress(`解析 ${file} 內容`);\r\n\r\n          return parseCSV(text, file);\r\n        } catch (error) {\r\n          console.error(`處理檔案 ${file} 時發生錯誤:`, error);\r\n          progress(`檔案 ${file} 處理失敗: ${error.message}`);\r\n          return [];\r\n        }\r\n      });\r\n\r\n      const batchData = await Promise.all(batchPromises);\r\n      allData = allData.concat(batchData.flat());\r\n    }\r\n\r\n    // 5. 驗證最終資料\r\n    if (allData.length === 0) {\r\n      throw new Error(\"沒有有效的資料可供處理\");\r\n    }\r\n\r\n    progress(`資料處理完成，共 ${allData.length} 筆記錄`);\r\n    return allData;\r\n  } catch (error) {\r\n    console.error(\"資料載入過程發生錯誤:\", error);\r\n    throw new Error(`資料載入失敗: ${error.message}`);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}