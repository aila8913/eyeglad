{"ast":null,"code":"// api.js\nimport Papa from \"papaparse\";\nexport const fetchCampaignData = async onProgress => {\n  try {\n    // 1. 開始載入資料\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(\"開始載入資料\");\n\n    // 2. 獲取檔案列表\n    const filesResponse = await fetch(\"http://localhost:5000/api/files\");\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(\"檔案列表回應狀態:\", filesResponse.status);\n    if (!filesResponse.ok) {\n      throw new Error(`Failed to fetch files list: ${filesResponse.status}`);\n    }\n\n    // 3. 解析檔案列表\n    let files = await filesResponse.json();\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(\"取得檔案列表:\", files);\n    if (!Array.isArray(files) || files.length === 0) {\n      throw new Error(\"No files available\");\n    }\n\n    // 4. 獲取檔案內容\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(\"開始獲取檔案內容\");\n    const dataPromises = files.map(file => fetch(`http://localhost:5000/api/data/${file}`).then(response => {\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(`檔案 ${file} 回應狀態: ${response.status}`);\n      if (!response.ok) throw new Error(`Failed to fetch ${file}`);\n      return response.text();\n    }).then(text => {\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(`解析 ${file} 內容`);\n      return Papa.parse(text, {\n        header: true,\n        dynamicTyping: true,\n        skipEmptyLines: true\n      }).data;\n    }).catch(error => {\n      console.error(`Error processing ${file}:`, error);\n      return [];\n    }));\n\n    // 5. 合併所有資料\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(\"等待所有檔案處理完成\");\n    const allData = await Promise.all(dataPromises);\n    const combinedData = allData.flat();\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(\"資料合併完成\");\n    return combinedData;\n  } catch (error) {\n    console.error(\"載入錯誤:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["Papa","fetchCampaignData","onProgress","filesResponse","fetch","status","ok","Error","files","json","Array","isArray","length","dataPromises","map","file","then","response","text","parse","header","dynamicTyping","skipEmptyLines","data","catch","error","console","allData","Promise","all","combinedData","flat"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/utils/api.js"],"sourcesContent":["// api.js\r\nimport Papa from \"papaparse\";\r\n\r\nexport const fetchCampaignData = async (onProgress) => {\r\n  try {\r\n    // 1. 開始載入資料\r\n    onProgress?.(\"開始載入資料\");\r\n\r\n    // 2. 獲取檔案列表\r\n    const filesResponse = await fetch(\"http://localhost:5000/api/files\");\r\n    onProgress?.(\"檔案列表回應狀態:\", filesResponse.status);\r\n\r\n    if (!filesResponse.ok) {\r\n      throw new Error(`Failed to fetch files list: ${filesResponse.status}`);\r\n    }\r\n\r\n    // 3. 解析檔案列表\r\n    let files = await filesResponse.json();\r\n    onProgress?.(\"取得檔案列表:\", files);\r\n\r\n    if (!Array.isArray(files) || files.length === 0) {\r\n      throw new Error(\"No files available\");\r\n    }\r\n\r\n    // 4. 獲取檔案內容\r\n    onProgress?.(\"開始獲取檔案內容\");\r\n    const dataPromises = files.map((file) =>\r\n      fetch(`http://localhost:5000/api/data/${file}`)\r\n        .then((response) => {\r\n          onProgress?.(`檔案 ${file} 回應狀態: ${response.status}`);\r\n          if (!response.ok) throw new Error(`Failed to fetch ${file}`);\r\n          return response.text();\r\n        })\r\n        .then((text) => {\r\n          onProgress?.(`解析 ${file} 內容`);\r\n          return Papa.parse(text, {\r\n            header: true,\r\n            dynamicTyping: true,\r\n            skipEmptyLines: true,\r\n          }).data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(`Error processing ${file}:`, error);\r\n          return [];\r\n        })\r\n    );\r\n\r\n    // 5. 合併所有資料\r\n    onProgress?.(\"等待所有檔案處理完成\");\r\n    const allData = await Promise.all(dataPromises);\r\n    const combinedData = allData.flat();\r\n    onProgress?.(\"資料合併完成\");\r\n\r\n    return combinedData;\r\n  } catch (error) {\r\n    console.error(\"載入錯誤:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,WAAW;AAE5B,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,UAAU,IAAK;EACrD,IAAI;IACF;IACAA,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,QAAQ,CAAC;;IAEtB;IACA,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;IACpEF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,WAAW,EAAEC,aAAa,CAACE,MAAM,CAAC;IAE/C,IAAI,CAACF,aAAa,CAACG,EAAE,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,+BAA+BJ,aAAa,CAACE,MAAM,EAAE,CAAC;IACxE;;IAEA;IACA,IAAIG,KAAK,GAAG,MAAML,aAAa,CAACM,IAAI,CAAC,CAAC;IACtCP,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,SAAS,EAAEM,KAAK,CAAC;IAE9B,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,IAAIA,KAAK,CAACI,MAAM,KAAK,CAAC,EAAE;MAC/C,MAAM,IAAIL,KAAK,CAAC,oBAAoB,CAAC;IACvC;;IAEA;IACAL,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,UAAU,CAAC;IACxB,MAAMW,YAAY,GAAGL,KAAK,CAACM,GAAG,CAAEC,IAAI,IAClCX,KAAK,CAAC,kCAAkCW,IAAI,EAAE,CAAC,CAC5CC,IAAI,CAAEC,QAAQ,IAAK;MAClBf,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,MAAMa,IAAI,UAAUE,QAAQ,CAACZ,MAAM,EAAE,CAAC;MACnD,IAAI,CAACY,QAAQ,CAACX,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,mBAAmBQ,IAAI,EAAE,CAAC;MAC5D,OAAOE,QAAQ,CAACC,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDF,IAAI,CAAEE,IAAI,IAAK;MACdhB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,MAAMa,IAAI,KAAK,CAAC;MAC7B,OAAOf,IAAI,CAACmB,KAAK,CAACD,IAAI,EAAE;QACtBE,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE,IAAI;QACnBC,cAAc,EAAE;MAClB,CAAC,CAAC,CAACC,IAAI;IACT,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,oBAAoBV,IAAI,GAAG,EAAEU,KAAK,CAAC;MACjD,OAAO,EAAE;IACX,CAAC,CACL,CAAC;;IAED;IACAvB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,YAAY,CAAC;IAC1B,MAAMyB,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAChB,YAAY,CAAC;IAC/C,MAAMiB,YAAY,GAAGH,OAAO,CAACI,IAAI,CAAC,CAAC;IACnC7B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,QAAQ,CAAC;IAEtB,OAAO4B,YAAY;EACrB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}