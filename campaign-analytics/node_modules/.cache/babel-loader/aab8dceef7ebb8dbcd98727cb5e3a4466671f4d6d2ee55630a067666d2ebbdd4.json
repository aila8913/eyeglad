{"ast":null,"code":"var _jsxFileName = \"C:\\\\python-training\\\\eyeglad\\\\campaign-analytics\\\\src\\\\components\\\\CampaignDashboard\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport _ from 'lodash';\nimport { fetchCampaignData } from '../../utils/api';\nimport { processCampaignData, processTrendData } from '../../utils/dataTransforms';\n\n// 導入子元件\nimport BestPerformersCard from './components/BestPerformersCard';\nimport CampaignTable from './components/CampaignTable';\nimport TrendCharts from './components/TrendCharts';\nimport ControlPanel from './components/ControlPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CampaignComparison = () => {\n  _s();\n  // 初始化狀態\n  const [campaignData, setCampaignData] = useState([]);\n  const [sortConfig, setSortConfig] = useState({\n    key: 'ROAS',\n    direction: 'desc'\n  });\n  const [bestPerformers, setBestPerformers] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dateRange, setDateRange] = useState({\n    startDate: '',\n    endDate: ''\n  });\n  const [timeGranularity, setTimeGranularity] = useState('hour');\n  const [compareMode, setCompareMode] = useState('combined');\n  const [rawData, setRawData] = useState([]);\n  const [availableCampaigns, setAvailableCampaigns] = useState([]);\n  const [selectedCampaigns, setSelectedCampaigns] = useState([]);\n  const [processedData, setProcessedData] = useState([]);\n\n  // 修改後的資料載入邏輯\n  useEffect(() => {\n    let isMounted = true; // 避免在元件卸載後更新狀態\n\n    const loadInitialData = async () => {\n      if (loading) return; // 避免重複載入\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // 取得資料\n        console.log('Fetching campaign data...');\n        const response = await fetchCampaignData();\n\n        // 檢查元件是否還在\n        if (!isMounted) return;\n\n        // 驗證回應資料\n        if (!response || !Array.isArray(response)) {\n          throw new Error('Invalid data format received');\n        }\n\n        // 設置原始資料\n        setRawData(response);\n\n        // 處理日期範圍\n        if (response.length > 0) {\n          const dates = response.map(item => new Date(item[\"Start Date\"])).filter(date => !isNaN(date.getTime()));\n          if (dates.length > 0) {\n            const minDate = new Date(Math.min(...dates));\n            const maxDate = new Date(Math.max(...dates));\n            setDateRange({\n              startDate: minDate.toISOString().split('T')[0],\n              endDate: maxDate.toISOString().split('T')[0]\n            });\n          }\n        }\n\n        // 處理活動資料\n        console.log('Processing campaign data...');\n        const processedResult = processCampaignData(response);\n        if (!isMounted) return;\n        setCampaignData(processedResult.stats);\n        setBestPerformers(processedResult.best);\n\n        // 設置可用活動\n        const campaigns = processedResult.stats.map(item => item.name);\n        setAvailableCampaigns(campaigns);\n        setSelectedCampaigns(campaigns);\n\n        // 處理趨勢資料\n        const trends = processTrendData(response, timeGranularity, compareMode);\n        setProcessedData(trends);\n      } catch (error) {\n        console.error('資料載入錯誤:', error);\n        if (isMounted) {\n          setError(error.message || '資料載入失敗');\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n    loadInitialData();\n\n    // 清理函數\n    return () => {\n      isMounted = false;\n    };\n  }, []); // 空依賴陣列，只在元件掛載時執行一次\n\n  // 處理排序\n  const handleSort = key => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev.key === key && prev.direction === 'desc' ? 'asc' : 'desc'\n    }));\n  };\n\n  // 處理資料過濾\n  const filteredData = useMemo(() => {\n    if (selectedCampaigns.length === 0 || !processedData) return [];\n    return processedData.map(data => {\n      if (compareMode === 'separate') {\n        return {\n          ...data,\n          campaignData: _.pick(data.campaignData || {}, selectedCampaigns)\n        };\n      }\n      return data;\n    });\n  }, [processedData, selectedCampaigns, compareMode]);\n\n  // 載入中狀態\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center min-h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 錯誤狀態\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-red-50 border border-red-200 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-red-800 font-semibold\",\n        children: \"\\u8F09\\u5165\\u5931\\u6557\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 渲染主要內容\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6 p-4\",\n    children: [bestPerformers && /*#__PURE__*/_jsxDEV(BestPerformersCard, {\n      bestPerformers: bestPerformers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      timeGranularity: timeGranularity,\n      setTimeGranularity: setTimeGranularity,\n      compareMode: compareMode,\n      setCompareMode: setCompareMode,\n      campaigns: availableCampaigns,\n      selectedCampaigns: selectedCampaigns,\n      setSelectedCampaigns: setSelectedCampaigns,\n      dateRange: dateRange,\n      setDateRange: setDateRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TrendCharts, {\n      processedData: filteredData,\n      compareMode: compareMode,\n      timeGranularity: timeGranularity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CampaignTable, {\n      campaignData: campaignData,\n      handleSort: handleSort,\n      sortConfig: sortConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(CampaignComparison, \"RThJ6DE9wLWy8oUkK8WghyD5Fs0=\");\n_c = CampaignComparison;\nexport default CampaignComparison;\nvar _c;\n$RefreshReg$(_c, \"CampaignComparison\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","_","fetchCampaignData","processCampaignData","processTrendData","BestPerformersCard","CampaignTable","TrendCharts","ControlPanel","jsxDEV","_jsxDEV","CampaignComparison","_s","campaignData","setCampaignData","sortConfig","setSortConfig","key","direction","bestPerformers","setBestPerformers","loading","setLoading","error","setError","dateRange","setDateRange","startDate","endDate","timeGranularity","setTimeGranularity","compareMode","setCompareMode","rawData","setRawData","availableCampaigns","setAvailableCampaigns","selectedCampaigns","setSelectedCampaigns","processedData","setProcessedData","isMounted","loadInitialData","console","log","response","Array","isArray","Error","length","dates","map","item","Date","filter","date","isNaN","getTime","minDate","Math","min","maxDate","max","toISOString","split","processedResult","stats","best","campaigns","name","trends","message","handleSort","prev","filteredData","data","pick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/components/CampaignDashboard/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport _ from 'lodash';\r\nimport { fetchCampaignData } from '../../utils/api';\r\nimport { processCampaignData, processTrendData } from '../../utils/dataTransforms';\r\n\r\n// 導入子元件\r\nimport BestPerformersCard from './components/BestPerformersCard';\r\nimport CampaignTable from './components/CampaignTable';\r\nimport TrendCharts from './components/TrendCharts';\r\nimport ControlPanel from './components/ControlPanel';\r\n\r\nconst CampaignComparison = () => {\r\n  // 初始化狀態\r\n  const [campaignData, setCampaignData] = useState([]);\r\n  const [sortConfig, setSortConfig] = useState({ key: 'ROAS', direction: 'desc' });\r\n  const [bestPerformers, setBestPerformers] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [dateRange, setDateRange] = useState({ startDate: '', endDate: '' });\r\n  const [timeGranularity, setTimeGranularity] = useState('hour');\r\n  const [compareMode, setCompareMode] = useState('combined');\r\n  const [rawData, setRawData] = useState([]);\r\n  const [availableCampaigns, setAvailableCampaigns] = useState([]);\r\n  const [selectedCampaigns, setSelectedCampaigns] = useState([]);\r\n  const [processedData, setProcessedData] = useState([]);\r\n\r\n  // 修改後的資料載入邏輯\r\n  useEffect(() => {\r\n    let isMounted = true; // 避免在元件卸載後更新狀態\r\n\r\n    const loadInitialData = async () => {\r\n      if (loading) return; // 避免重複載入\r\n\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        // 取得資料\r\n        console.log('Fetching campaign data...');\r\n        const response = await fetchCampaignData();\r\n        \r\n        // 檢查元件是否還在\r\n        if (!isMounted) return;\r\n\r\n        // 驗證回應資料\r\n        if (!response || !Array.isArray(response)) {\r\n          throw new Error('Invalid data format received');\r\n        }\r\n\r\n        // 設置原始資料\r\n        setRawData(response);\r\n\r\n        // 處理日期範圍\r\n        if (response.length > 0) {\r\n          const dates = response\r\n            .map(item => new Date(item[\"Start Date\"]))\r\n            .filter(date => !isNaN(date.getTime()));\r\n\r\n          if (dates.length > 0) {\r\n            const minDate = new Date(Math.min(...dates));\r\n            const maxDate = new Date(Math.max(...dates));\r\n\r\n            setDateRange({\r\n              startDate: minDate.toISOString().split('T')[0],\r\n              endDate: maxDate.toISOString().split('T')[0]\r\n            });\r\n          }\r\n        }\r\n\r\n        // 處理活動資料\r\n        console.log('Processing campaign data...');\r\n        const processedResult = processCampaignData(response);\r\n        \r\n        if (!isMounted) return;\r\n        \r\n        setCampaignData(processedResult.stats);\r\n        setBestPerformers(processedResult.best);\r\n        \r\n        // 設置可用活動\r\n        const campaigns = processedResult.stats.map(item => item.name);\r\n        setAvailableCampaigns(campaigns);\r\n        setSelectedCampaigns(campaigns);\r\n\r\n        // 處理趨勢資料\r\n        const trends = processTrendData(response, timeGranularity, compareMode);\r\n        setProcessedData(trends);\r\n\r\n      } catch (error) {\r\n        console.error('資料載入錯誤:', error);\r\n        if (isMounted) {\r\n          setError(error.message || '資料載入失敗');\r\n        }\r\n      } finally {\r\n        if (isMounted) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    loadInitialData();\r\n\r\n    // 清理函數\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []); // 空依賴陣列，只在元件掛載時執行一次\r\n\r\n  // 處理排序\r\n  const handleSort = (key) => {\r\n    setSortConfig(prev => ({\r\n      key,\r\n      direction: prev.key === key && prev.direction === 'desc' ? 'asc' : 'desc'\r\n    }));\r\n  };\r\n\r\n  // 處理資料過濾\r\n  const filteredData = useMemo(() => {\r\n    if (selectedCampaigns.length === 0 || !processedData) return [];\r\n    \r\n    return processedData.map(data => {\r\n      if (compareMode === 'separate') {\r\n        return {\r\n          ...data,\r\n          campaignData: _.pick(data.campaignData || {}, selectedCampaigns)\r\n        };\r\n      }\r\n      return data;\r\n    });\r\n  }, [processedData, selectedCampaigns, compareMode]);\r\n\r\n  // 載入中狀態\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 錯誤狀態\r\n  if (error) {\r\n    return (\r\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h3 className=\"text-red-800 font-semibold\">載入失敗</h3>\r\n        <p className=\"text-red-600\">{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 渲染主要內容\r\n  return (\r\n    <div className=\"space-y-6 p-4\">\r\n      {bestPerformers && (\r\n        <BestPerformersCard bestPerformers={bestPerformers} />\r\n      )}\r\n\r\n      <ControlPanel\r\n        timeGranularity={timeGranularity}\r\n        setTimeGranularity={setTimeGranularity}\r\n        compareMode={compareMode}\r\n        setCompareMode={setCompareMode}\r\n        campaigns={availableCampaigns}\r\n        selectedCampaigns={selectedCampaigns}\r\n        setSelectedCampaigns={setSelectedCampaigns}\r\n        dateRange={dateRange}\r\n        setDateRange={setDateRange}\r\n      />\r\n      \r\n      <TrendCharts \r\n        processedData={filteredData}\r\n        compareMode={compareMode}\r\n        timeGranularity={timeGranularity}\r\n      />\r\n      \r\n      <CampaignTable \r\n        campaignData={campaignData}\r\n        handleSort={handleSort}\r\n        sortConfig={sortConfig}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampaignComparison;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}