{"ast":null,"code":"import Papa from \"papaparse\";\nexport const fetchCampaignData = async () => {\n  try {\n    const filesResponse = await fetch(\"http://localhost:5000/api/files\");\n    if (!filesResponse.ok) {\n      throw new Error(`HTTP error! status: ${filesResponse.status}`);\n    }\n    const files = await filesResponse.json();\n    const allData = await Promise.all(files.map(async file => {\n      const response = await fetch(`http://localhost:5000/api/data/${file}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch ${file}`);\n      }\n      const text = await response.text();\n      return Papa.parse(text, {\n        header: true,\n        dynamicTyping: true,\n        skipEmptyLines: true\n      }).data;\n    }));\n    return allData.flat();\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["Papa","fetchCampaignData","filesResponse","fetch","ok","Error","status","files","json","allData","Promise","all","map","file","response","text","parse","header","dynamicTyping","skipEmptyLines","data","flat","error","console"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/utils/api.js"],"sourcesContent":["import Papa from \"papaparse\";\r\n\r\nexport const fetchCampaignData = async () => {\r\n  try {\r\n    const filesResponse = await fetch(\"http://localhost:5000/api/files\");\r\n    if (!filesResponse.ok) {\r\n      throw new Error(`HTTP error! status: ${filesResponse.status}`);\r\n    }\r\n    const files = await filesResponse.json();\r\n\r\n    const allData = await Promise.all(\r\n      files.map(async (file) => {\r\n        const response = await fetch(`http://localhost:5000/api/data/${file}`);\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch ${file}`);\r\n        }\r\n        const text = await response.text();\r\n        return Papa.parse(text, {\r\n          header: true,\r\n          dynamicTyping: true,\r\n          skipEmptyLines: true,\r\n        }).data;\r\n      })\r\n    );\r\n\r\n    return allData.flat();\r\n  } catch (error) {\r\n    console.error(\"Error fetching data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;IACpE,IAAI,CAACD,aAAa,CAACE,EAAE,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,aAAa,CAACI,MAAM,EAAE,CAAC;IAChE;IACA,MAAMC,KAAK,GAAG,MAAML,aAAa,CAACM,IAAI,CAAC,CAAC;IAExC,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC/BJ,KAAK,CAACK,GAAG,CAAC,MAAOC,IAAI,IAAK;MACxB,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAC,kCAAkCU,IAAI,EAAE,CAAC;MACtE,IAAI,CAACC,QAAQ,CAACV,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,mBAAmBQ,IAAI,EAAE,CAAC;MAC5C;MACA,MAAME,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAI,CAAC,CAAC;MAClC,OAAOf,IAAI,CAACgB,KAAK,CAACD,IAAI,EAAE;QACtBE,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE,IAAI;QACnBC,cAAc,EAAE;MAClB,CAAC,CAAC,CAACC,IAAI;IACT,CAAC,CACH,CAAC;IAED,OAAOX,OAAO,CAACY,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}