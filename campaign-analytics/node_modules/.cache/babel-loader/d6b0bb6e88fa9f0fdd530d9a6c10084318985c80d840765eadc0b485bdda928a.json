{"ast":null,"code":"// dataTransforms.js\nimport _ from \"lodash\";\n\n// 共用的工具函數\nconst parseCurrencyValue = value => {\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\n};\nconst calculateRate = (numerator, denominator, decimals = 2) => {\n  return denominator > 0 ? (numerator / denominator * 100).toFixed(decimals) : null;\n};\nconst getDateKey = (dateStr, timeGranularity) => {\n  const date = new Date(dateStr);\n  switch (timeGranularity) {\n    case \"hour\":\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")} ${String(date.getHours()).padStart(2, \"0\")}:00`;\n    case \"week\":\n      const weekStart = new Date(date);\n      weekStart.setDate(date.getDate() - date.getDay());\n      return weekStart.toISOString().split(\"T\")[0];\n    case \"month\":\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\n    default:\n      // day\n      return date.toISOString().split(\"T\")[0];\n  }\n};\nconst findBestPerformers = stats => {\n  return {\n    highestROAS: _.maxBy(stats, \"ROAS\"),\n    lowestACOS: _.minBy(stats.filter(c => parseFloat(c.ACOS) > 0), \"ACOS\"),\n    highestCTR: _.maxBy(stats, c => parseFloat(c.CTR)),\n    highestConversion: _.maxBy(stats, c => parseFloat(c.conversionRate))\n  };\n};\n\n// 主要的導出函數\nexport const processCampaignData = data => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return {\n      stats: [],\n      best: null\n    };\n  }\n  const stats = _(data).groupBy(\"Campaign Name\").map((campaign, name) => {\n    const totalImpressions = _.sumBy(campaign, \"Impressions\");\n    const totalClicks = _.sumBy(campaign, \"Clicks\");\n    const totalOrders = _.sumBy(campaign, \"7 Day Total Orders (#)\");\n    const totalSpend = _.sumBy(campaign, row => parseCurrencyValue(row[\"Spend\"]));\n    const totalSales = _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"]));\n    return {\n      name,\n      impressions: totalImpressions,\n      clicks: totalClicks,\n      orders: totalOrders,\n      spend: totalSpend,\n      sales: totalSales,\n      CTR: calculateRate(totalClicks, totalImpressions),\n      CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\n      ACOS: calculateRate(totalSpend, totalSales),\n      ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\n      conversionRate: calculateRate(totalOrders, totalClicks)\n    };\n  }).value();\n  return {\n    stats,\n    best: findBestPerformers(stats)\n  };\n};\nexport const processTrendData = (data, timeGranularity = \"day\", compareMode = \"combined\") => {\n  if (!Array.isArray(data)) {\n    console.error(\"Input data is not an array\");\n    return [];\n  }\n  return _(data).groupBy(row => {\n    const dateTime = `${row[\"Start Date\"]} ${row[\"Hour\"] || \"00:00\"}`;\n    return getDateKey(new Date(dateTime), timeGranularity);\n  }).map((group, date) => {\n    const metrics = {\n      date,\n      sales: _.sumBy(group, row => parseCurrencyValue(row[\"7 Day Total Sales \"])),\n      spend: _.sumBy(group, row => parseCurrencyValue(row[\"Spend\"]))\n    };\n    if (compareMode === \"separate\") {\n      metrics.campaignData = _(group).groupBy(\"Campaign Name\").mapValues(campaign => ({\n        sales: _.sumBy(campaign, row => parseCurrencyValue(row[\"7 Day Total Sales \"])),\n        spend: _.sumBy(campaign, row => parseCurrencyValue(row[\"Spend\"]))\n      })).value();\n    }\n    metrics.ACOS = calculateRate(metrics.spend, metrics.sales);\n    return metrics;\n  }).orderBy(\"date\", \"asc\").value();\n};","map":{"version":3,"names":["_","parseCurrencyValue","value","parseFloat","replace","calculateRate","numerator","denominator","decimals","toFixed","getDateKey","dateStr","timeGranularity","date","Date","getFullYear","String","getMonth","padStart","getDate","getHours","weekStart","setDate","getDay","toISOString","split","findBestPerformers","stats","highestROAS","maxBy","lowestACOS","minBy","filter","c","ACOS","highestCTR","CTR","highestConversion","conversionRate","processCampaignData","data","Array","isArray","console","error","best","groupBy","map","campaign","name","totalImpressions","sumBy","totalClicks","totalOrders","totalSpend","row","totalSales","impressions","clicks","orders","spend","sales","CPC","ROAS","processTrendData","compareMode","dateTime","group","metrics","campaignData","mapValues","orderBy"],"sources":["C:/python-training/eyeglad/campaign-analytics/src/utils/dataTransforms.js"],"sourcesContent":["// dataTransforms.js\r\nimport _ from \"lodash\";\r\n\r\n// 共用的工具函數\r\nconst parseCurrencyValue = (value) => {\r\n  return parseFloat(value.replace(\"$\", \"\")) || 0;\r\n};\r\n\r\nconst calculateRate = (numerator, denominator, decimals = 2) => {\r\n  return denominator > 0\r\n    ? ((numerator / denominator) * 100).toFixed(decimals)\r\n    : null;\r\n};\r\n\r\nconst getDateKey = (dateStr, timeGranularity) => {\r\n  const date = new Date(dateStr);\r\n\r\n  switch (timeGranularity) {\r\n    case \"hour\":\r\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\r\n        2,\r\n        \"0\"\r\n      )}-${String(date.getDate()).padStart(2, \"0\")} ${String(\r\n        date.getHours()\r\n      ).padStart(2, \"0\")}:00`;\r\n    case \"week\":\r\n      const weekStart = new Date(date);\r\n      weekStart.setDate(date.getDate() - date.getDay());\r\n      return weekStart.toISOString().split(\"T\")[0];\r\n    case \"month\":\r\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\r\n        2,\r\n        \"0\"\r\n      )}`;\r\n    default: // day\r\n      return date.toISOString().split(\"T\")[0];\r\n  }\r\n};\r\n\r\nconst findBestPerformers = (stats) => {\r\n  return {\r\n    highestROAS: _.maxBy(stats, \"ROAS\"),\r\n    lowestACOS: _.minBy(\r\n      stats.filter((c) => parseFloat(c.ACOS) > 0),\r\n      \"ACOS\"\r\n    ),\r\n    highestCTR: _.maxBy(stats, (c) => parseFloat(c.CTR)),\r\n    highestConversion: _.maxBy(stats, (c) => parseFloat(c.conversionRate)),\r\n  };\r\n};\r\n\r\n// 主要的導出函數\r\nexport const processCampaignData = (data) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return { stats: [], best: null };\r\n  }\r\n\r\n  const stats = _(data)\r\n    .groupBy(\"Campaign Name\")\r\n    .map((campaign, name) => {\r\n      const totalImpressions = _.sumBy(campaign, \"Impressions\");\r\n      const totalClicks = _.sumBy(campaign, \"Clicks\");\r\n      const totalOrders = _.sumBy(campaign, \"7 Day Total Orders (#)\");\r\n      const totalSpend = _.sumBy(campaign, (row) =>\r\n        parseCurrencyValue(row[\"Spend\"])\r\n      );\r\n      const totalSales = _.sumBy(campaign, (row) =>\r\n        parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n      );\r\n\r\n      return {\r\n        name,\r\n        impressions: totalImpressions,\r\n        clicks: totalClicks,\r\n        orders: totalOrders,\r\n        spend: totalSpend,\r\n        sales: totalSales,\r\n        CTR: calculateRate(totalClicks, totalImpressions),\r\n        CPC: totalClicks ? (totalSpend / totalClicks).toFixed(2) : 0,\r\n        ACOS: calculateRate(totalSpend, totalSales),\r\n        ROAS: totalSpend ? (totalSales / totalSpend).toFixed(2) : 0,\r\n        conversionRate: calculateRate(totalOrders, totalClicks),\r\n      };\r\n    })\r\n    .value();\r\n\r\n  return {\r\n    stats,\r\n    best: findBestPerformers(stats),\r\n  };\r\n};\r\n\r\nexport const processTrendData = (\r\n  data,\r\n  timeGranularity = \"day\",\r\n  compareMode = \"combined\"\r\n) => {\r\n  if (!Array.isArray(data)) {\r\n    console.error(\"Input data is not an array\");\r\n    return [];\r\n  }\r\n\r\n  return _(data)\r\n    .groupBy((row) => {\r\n      const dateTime = `${row[\"Start Date\"]} ${row[\"Hour\"] || \"00:00\"}`;\r\n      return getDateKey(new Date(dateTime), timeGranularity);\r\n    })\r\n    .map((group, date) => {\r\n      const metrics = {\r\n        date,\r\n        sales: _.sumBy(group, (row) =>\r\n          parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n        ),\r\n        spend: _.sumBy(group, (row) => parseCurrencyValue(row[\"Spend\"])),\r\n      };\r\n\r\n      if (compareMode === \"separate\") {\r\n        metrics.campaignData = _(group)\r\n          .groupBy(\"Campaign Name\")\r\n          .mapValues((campaign) => ({\r\n            sales: _.sumBy(campaign, (row) =>\r\n              parseCurrencyValue(row[\"7 Day Total Sales \"])\r\n            ),\r\n            spend: _.sumBy(campaign, (row) => parseCurrencyValue(row[\"Spend\"])),\r\n          }))\r\n          .value();\r\n      }\r\n\r\n      metrics.ACOS = calculateRate(metrics.spend, metrics.sales);\r\n      return metrics;\r\n    })\r\n    .orderBy(\"date\", \"asc\")\r\n    .value();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}